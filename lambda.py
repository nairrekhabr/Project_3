{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2038e5b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "from dateutil.relativedelta import relativedelta\n",
    "from botocore.vendored import requests\n",
    "\n",
    "### Functionality Helper Functions ###\n",
    "def parse_float(n):\n",
    "    \"\"\"\n",
    "    Securely converts a non-numeric value to float.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        return float(n)\n",
    "    except ValueError:\n",
    "        return float(\"nan\")\n",
    "    \n",
    "def parse_int(n):\n",
    "    \"\"\"\n",
    "    Securely converts a non-numeric value to float.\n",
    "    \"\"\"\n",
    "    try:\n",
    "        return int(n)\n",
    "    except ValueError:\n",
    "        return int(\"nan\")\n",
    "    \n",
    "def risk(risk_level):\n",
    "    \"\"\"\n",
    "    Defines each risk level\n",
    "    \"\"\"\n",
    "    if risk_level == \"conservative\":\n",
    "        recommend = \"30% (VFORX), 20% (FFFFX), 20%(TRRDX), 15%(BTC), 15%(ETH)\"\n",
    "    elif risk_level == \"moderate\":\n",
    "        recommend = \"15%(SWPPX), 15%(VOO), 15%(VFORX), 15%(FXAIX), 15%(ETH), 10%(LINK), 10%(MKR), 5%(BTC)\"\n",
    "    elif risk_level == \"aggressive\":\n",
    "        recommend = \" 25%(FXAIX) ,25%(ETH),25%(BTC), 25%(LINK)\"\n",
    "   \n",
    "\n",
    "    return recommend\n",
    "\n",
    "def build_validation_result(is_valid, violated_slot, message_content):\n",
    "    \"\"\"\n",
    "    Defines an internal validation message structured as a python dictionary.\n",
    "    \"\"\"\n",
    "    if message_content is None:\n",
    "        return {\"isValid\": is_valid, \"violatedSlot\": violated_slot}\n",
    "\n",
    "    return {\n",
    "        \"isValid\": is_valid,\n",
    "        \"violatedSlot\": violated_slot,\n",
    "        \"message\": {\"contentType\": \"PlainText\", \"content\": message_content},\n",
    "    }\n",
    "\n",
    "def validate_data(age, investment_amount, intent_request):\n",
    "    \"\"\"\n",
    "    Validates the data provided by the user.\n",
    "    \"\"\"\n",
    "\n",
    "    # Validate that the user is over 18 years old\n",
    "    if age is not None:\n",
    "        age = parse_int(age)\n",
    "        \n",
    "        if age < 18:\n",
    "            return build_validation_result(\n",
    "                False,\n",
    "                \"age\",\n",
    "                \"You should be at least 18 years old to use this service, \"\n",
    "                \"please provide proper details\",\n",
    "            )\n",
    "\n",
    "    # Validate the investment amount, it should be > 0\n",
    "  \n",
    "    if investment_amount is not None:\n",
    "        investment_amount = parse_int(investment_amount)\n",
    "        if investment_amount < 5000:\n",
    "            return build_validation_result(\n",
    "                False,\n",
    "                \"investmentAmount\",\n",
    "                \"The minimum investment amount is $5,000 USD, \"\n",
    "                \"could you please provide a greater amount?\",\n",
    "            )\n",
    "\n",
    "    return build_validation_result(True, None, None)\n",
    "\n",
    "    # A True results is returned if age or amount are valid\n",
    "    return build_validation_result(True, None, None)\n",
    "\n",
    "### Dialog Actions Helper Functions ###\n",
    "def get_slots(intent_request):\n",
    "    \"\"\"\n",
    "    Fetch all the slots and their values from the current intent.\n",
    "    \"\"\"\n",
    "    return intent_request[\"currentIntent\"][\"slots\"]\n",
    "\n",
    "\n",
    "\n",
    "def elicit_slot(session_attributes, intent_name, slots, slot_to_elicit, message):\n",
    "    \"\"\"\n",
    "    Defines an elicit slot type response.\n",
    "    \"\"\"\n",
    "\n",
    "    return {\n",
    "        \"sessionAttributes\": session_attributes,\n",
    "        \"dialogAction\": {\n",
    "            \"type\": \"ElicitSlot\",\n",
    "            \"intentName\": intent_name,\n",
    "            \"slots\": slots,\n",
    "            \"slotToElicit\": slot_to_elicit,\n",
    "            \"message\": message,\n",
    "        },\n",
    "    }\n",
    "\n",
    "def delegate(session_attributes, slots):\n",
    "    \"\"\"\n",
    "    Defines a delegate slot type response.\n",
    "    \"\"\"\n",
    "\n",
    "    return {\n",
    "        \"sessionAttributes\": session_attributes,\n",
    "        \"dialogAction\": {\"type\": \"Delegate\", \"slots\": slots},\n",
    "    }\n",
    "\n",
    "def close(session_attributes, fulfillment_state, message):\n",
    "    \"\"\"\n",
    "    Defines a close slot type response.\n",
    "    \"\"\"\n",
    "\n",
    "    response = {\n",
    "        \"sessionAttributes\": session_attributes,\n",
    "        \"dialogAction\": {\n",
    "            \"type\": \"Close\",\n",
    "            \"fulfillmentState\": \"Fulfilled\",\n",
    "            \"message\": message,\n",
    "        },\n",
    "    }\n",
    "\n",
    "    return response\n",
    "\n",
    "def recommend_portfolio(intent_request):\n",
    "    \"\"\"\n",
    "    Performs dialog management and fulfillment for recommending a portfolio.\n",
    "    \"\"\"\n",
    "\n",
    "    first_name = get_slots(intent_request)[\"firstName\"]\n",
    "    age = get_slots(intent_request)[\"age\"]\n",
    "    investment_amount = get_slots(intent_request)[\"investmentAmount\"]\n",
    "    risk_level = get_slots(intent_request)[\"riskLevel\"]\n",
    "    source = intent_request[\"invocationSource\"]\n",
    "\n",
    "    if source == \"DialogCodeHook\":\n",
    "        # Perform basic validation on the supplied input slots.\n",
    "        # Gets all the slots\n",
    "        slots = get_slots(intent_request)\n",
    "\n",
    "        # Use the elicitSlot dialog action to re-prompt\n",
    "        # for the first violation detected.\n",
    "        \n",
    "        validation_result = validate_data(age, investment_amount, intent_request)\n",
    "        \n",
    "\n",
    "\n",
    "        # If the data provided by the user is not valid,\n",
    "        # the elicitSlot dialog action is used to re-prompt for the first violation detected.\n",
    "        if not validation_result[\"isValid\"]:\n",
    "            slots[validation_result[\"violatedSlot\"]] = None  # Cleans invalid slot\n",
    "\n",
    "            # Returns an elicitSlot dialog to request new data for the invalid slot\n",
    "            return elicit_slot(\n",
    "                intent_request[\"sessionAttributes\"],\n",
    "                intent_request[\"currentIntent\"][\"name\"],\n",
    "                slots,\n",
    "                validation_result[\"violatedSlot\"],\n",
    "                validation_result[\"message\"],\n",
    "            )\n",
    "        \n",
    "                # Fetch current session attibutes\n",
    "        output_session_attributes = intent_request[\"sessionAttributes\"]\n",
    "\n",
    "        return delegate(output_session_attributes, get_slots(intent_request))\n",
    "\n",
    "    # Get the initial investment recommendation\n",
    "\n",
    "    initial_recommendation = risk(risk_level) \n",
    "   \n",
    "\n",
    "    # Return a message with the initial recommendation based on the risk level.\n",
    "    return close(\n",
    "        intent_request[\"sessionAttributes\"],\n",
    "        \"Fulfilled\",\n",
    "        {\n",
    "            \"contentType\": \"PlainText\",\n",
    "            \"content\": '{} thank you for your information; based on the risk level you defined, my recommendation is to choose an investment portfolio with {}'.format(\n",
    "                 first_name, initial_recommendation\n",
    "            ),\n",
    "        },\n",
    "    )\n",
    "\n",
    "### Intents Dispatcher ###\n",
    "def dispatch(intent_request):\n",
    "    \"\"\"\n",
    "    Called when the user specifies an intent for this bot.\n",
    "    \"\"\"\n",
    "\n",
    "    intent_name = intent_request[\"currentIntent\"][\"name\"]\n",
    "\n",
    "    # Dispatch to bot's intent handlers\n",
    "    if intent_name == \"invest\":\n",
    "        return recommend_portfolio(intent_request)\n",
    "\n",
    "    raise Exception(\"Intent with name \" + intent_name + \" not supported\")\n",
    "\n",
    "\n",
    "### Main Handler ###\n",
    "def lambda_handler(event, context):\n",
    "    \"\"\"\n",
    "    Route the incoming request based on intent.\n",
    "    The JSON body of the request is provided in the event slot.\n",
    "    \"\"\"\n",
    "\n",
    "    return dispatch(event)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
